# -*- coding: utf-8 -*-
"""22110189_LabAssignment6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18lw6opnRuua3eJdAqOvYRLPRgVPF8OYN
"""

# please follow order 1st que, 4th que, then 5th que. after that any

import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import bernoulli, geom, binom, poisson
from scipy.stats import uniform, expon, rayleigh, laplace, norm, chi2, gamma, lognorm, cauchy, beta, weibull_min

"""# Question 1
Plot the PMF and CDF of Bernoulli, Geometric, Binomial, and Poission random variables. Choose various values of parameters.
"""

# please follow order 1st que, 4th que, then 5th que. after that any

p=0.3

def ploting(name,r,pmf,cdf):
  rval=r
  pval=p
  fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))
  ax1.bar(r,pmf)
  ax1.set_title('Probability Mass fuction')
  ax2.bar(r,cdf)
  ax2.set_title('Cumulative Distribution fuction')
  fig.suptitle(f'{name} for p={pval} and r={rval}')
  plt.show()

r=np.array([0,1])
bernoullipmf=bernoulli.pmf(r,p)
bernoullicdf=bernoulli.cdf(r,p)
ploting('bernoulli',r,bernoullipmf,bernoullicdf)
# meanbernoulli=bernoulli(r,p).mean()
# varbernoulli=bernoulli(r,p).var()

r1=np.arange(20)
geompmf=geom.pmf(r1,p)
geomcdf=geom.cdf(r1,p)
ploting('geometic',r1,geompmf,geomcdf)
# meangeometic=geom(r1,p).mean()
# vargeometic=geom(r1,p).var()

n=3
rlist=list(range(n+1))
binompmf=[binom.pmf(r,n,p) for r in rlist]
binomcdf=[binom.cdf(r,n,p) for r in rlist]
ploting('binomial',rlist,binompmf,binomcdf)
# meanbinomial,varbinomial=binom.stats(n,p)

x=np.arange(8)
# p=10
poissionpmf=poisson.pmf(x,p)
poissioncdf=poisson.cdf(x,p)
ploting('poission',x,poissionpmf,poissioncdf)
# meanpoission=poisson(x,p).mean()
# varpoission=poisson(x,p).var()

# x=np.arange(0, 100, p)
# poissionpmf=poisson.pmf(x,mu=40, loc=10)
# poissioncdf=poisson.cdf(x,mu=40, loc=10)
# ploting('poission',x,poissionpmf,poissioncdf)

"""# Question 2
Show the equivalence and the difference between various choices of parameters for Binomial and Poission distributions. Use both PMF and CDF.
"""

# please follow order 1st que, 4th que, then 5th que. after that any

# Binomial and Poission will give almost same value 
# if we take probability of binomial very less 
# and probability of Poission large at same size

x=np.arange(8)

p=0.001
n=1000
binompmf=binom.pmf(x,n,p)
binomcdf=binom.cdf(x,n,p)
ploting('binomial',x,binompmf,binomcdf)

l=1
p=l
poissionpmf=poisson.pmf(x,l)
poissioncdf=poisson.cdf(x,l)
ploting('poission',x,poissionpmf,poissioncdf)

"""# Question 3
Read an image and add different amounts of Gaussian Noise and display the corrupted images.
"""

import cv2

image=cv2.imread('/content/Image_created_with_a_mobile_phone.png')
gaus=np.random.normal(0,100,image.shape)
gaus_add=image+gaus

cv2.imwrite('with_gaus.jpg',gaus_add)

from PIL import Image

img_orignal = Image.open('/content/Image_created_with_a_mobile_phone.png')
img_gaus = Image.open('with_gaus.jpg')

size = (int(img_orignal.size[0] / 2), int(img_orignal.size[1] / 2))
orignal_resized = img_orignal.resize(size)
gaus_resized = img_gaus.resize(size)

orignal_resized.show()
gaus_resized.show()

"""# Question 4
Plot the PDF and CDF of the following random variables for different parameter values.
- Uniform
- Exponential
- Rayleigh
- Laplacian
- Gaussian (Normal)
- Chi-square
- Erlang
- Log-normal
- Cauchy
- Beta
- Weibull
"""

# please follow order 1st que, 4th que, then 5th que. after that any

x=np.arange(10)

def ploting(name,x,ypdf,ycdf):
  fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))
  ax1.plot(x,ypdf)
  ax1.set_title('Probability Distribution fuction')
  ax2.plot(x,ycdf)
  ax2.set_title('Cumulative Distribution fuction')
  fig.suptitle(f'PDF and CDF of the random variable {name}')
  plt.show()

def all(name,fuc_name,x):
  pdf=fuc_name.pdf(x)
  cdf=fuc_name.cdf(x)
  ploting(name,x,pdf,cdf)

# Uniform
all('Uniform',uniform,x)
# meanuniform=uniform(x).mean()
# varuniform=uniform(x).var()

# Exponential
all('Exponential',expon,x)
# meanexpon=expon(x).mean()
# varexpon=expon(x).var()

# Rayleigh
all('Rayleigh',rayleigh,x)
# meanrayleigh=rayleigh(x).mean()
# varrayleigh=rayleigh(x).var()

# Laplacian
all('Laplacian',laplace,x)
# meanlaplace=laplace(x).mean()
# varlaplace=laplace(x).var()

# Gaussian (Normal)
all('Gaussian (Normal)',norm,x)
# meannorm=norm(x).mean()
# varnorm=norm(x).var()

# Chi-square
chi2_dist=chi2(4)
all('Chi-square',chi2_dist,x)
# meannorm=chi2_dist.mean()
# varnorm=chi2_dist.var()

# Erlang
gamma_dist=gamma(3,1)
all('Erlang',gamma_dist,x)
# meangamma_dist=gamma_dist.mean()
# vargamma_dist=gamma_dist.var()

# Log-normal
# all('Log-normal',lognorm,x)
ypdf=lognorm.pdf(x, s=0.5, loc=0)
ycdf=lognorm.cdf(x, s=0.5, loc=0)
fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))
ax1.plot(x,ypdf)
ax1.set_title('Probability Distribution fuction')
ax2.plot(x,ycdf)
ax2.set_title('Cumulative Distribution fuction')
fig.suptitle(f'PDF and CDF of the random variable Log-normal')
plt.show()

# Cauchy
all('Cauchy',cauchy,x)

# Beta
# all('Beta',beta,x)
ypdf=beta.pdf(x, a=2, b=5)
ycdf=beta.cdf(x, a=2, b=5)
fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))
ax1.plot(x,ypdf)
ax1.set_title('Probability Distribution fuction')
ax2.plot(x,ycdf)
ax2.set_title('Cumulative Distribution fuction')
fig.suptitle(f'PDF and CDF of the random variable Beta')
plt.show()

# Weibull
# all('Weibull',weibull_min,x)
ypdf=weibull_min.pdf(x, c=2)
ycdf=weibull_min.cdf(x, c=2)
fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,5))
ax1.plot(x,ypdf)
ax1.set_title('Probability Distribution fuction')
ax2.plot(x,ycdf)
ax2.set_title('Cumulative Distribution fuction')
fig.suptitle(f'PDF and CDF of the random variable Weibull')
plt.show()

"""# Question 5
Find the Expectation and variance for all the random variables in Question 1 & 4. Further, find and/or plot their characteristic functions.
"""

# please follow order 1st que, 4th que, then 5th que. after that any

from tabulate import tabulate

data=[]
def table(name,mean,var):
  data.append([name,mean,var])

def mean_var(name,fuc_name):
  mean=fuc_name.mean()
  var=fuc_name.var()
  table(name,mean,var)

# mean_var('bernoulli',bernoulli(r,p))
# mean_var('geometic',geom(r1,p))
# mean_var('binomial',binom.stats(n,p))
# mean_var('poission',poisson(x,p))

# bernoulli
meanbernoulli=bernoulli(r,p).mean()
varbernoulli=bernoulli(r,p).var()
table('bernoulli',meanbernoulli,varbernoulli)

# geometic
meangeometic=geom(r1,p).mean()
vargeometic=geom(r1,p).var()
table('geometic',meangeometic,vargeometic)

# binomial
meanbinomial,varbinomial=binom.stats(n,p)
table('binomial',meanbinomial,varbinomial)

# poission
meanpoission=poisson(x,p).mean()
varpoission=poisson(x,p).var()
table('poission',meanpoission,varpoission)

# uniform
mean_var('uniform',uniform(x))

# exponential
mean_var('exponential',expon(x))

# rayleigh
mean_var('rayleigh',rayleigh(x))

# laplacian
mean_var('laplacian',laplace(x))

# Gaussian (Normal)
mean_var('Gaussian (Normal)',norm(x))

# gamma_dist
mean_var('gamma_dist',gamma_dist)

# chi square
mean_var('chi square',chi2_dist)

# Log-normal
mean_var('Log-normal',lognorm(s=0.5, loc=0))

# cauchy
mean_var('cauchy',cauchy)

# Beta
mean_var('Beta',beta(a=2, b=5))

# Weibull
mean_var('Weibull',weibull_min(c=2))

tabletitles=['Random Variables','Expectation','Variance']
tables=tabulate(data,tabletitles)
print(tables)

# please follow order 1st que, 4th que, then 5th que. after that any

from tabulate import tabulate

data=[]
def table(name,mean,var):
  data.append([name,mean,var])

def find_plot_chara(name,fuc_name):
  linespace=np.linspace(-5, 5, 1000)
  cf=fuc_name(linespace)
  plt.plot(x,cf.real,label="real")
  plt.plot(x,cf.imag,label="imaginary")
  plt.title(name)

def mean_var(name,fuc_name):
  mean=fuc_name.mean()
  var=fuc_name.var()
  table(name,mean,var)
  find_plot_chara(name,fuc_name)

# mean_var('bernoulli',bernoulli(r,p))
# mean_var('geometic',geom(r1,p))
# mean_var('binomial',binom.stats(n,p))
# mean_var('poission',poisson(x,p))

# bernoulli
meanbernoulli=bernoulli(r,p).mean()
varbernoulli=bernoulli(r,p).var()
table('bernoulli',meanbernoulli,varbernoulli)

# geometic
meangeometic=geom(r1,p).mean()
vargeometic=geom(r1,p).var()
table('geometic',meangeometic,vargeometic)

# binomial
meanbinomial,varbinomial=binom.stats(n,p)
table('binomial',meanbinomial,varbinomial)

# poission
meanpoission=poisson(x,p).mean()
varpoission=poisson(x,p).var()
table('poission',meanpoission,varpoission)

# uniform
mean_var('uniform',uniform(x))

# exponential
mean_var('exponential',expon(x))

# rayleigh
mean_var('rayleigh',rayleigh(x))

# laplacian
mean_var('laplacian',laplace(x))

# Gaussian (Normal)
mean_var('Gaussian (Normal)',norm(x))

# gamma_dist
mean_var('gamma_dist',gamma_dist)

# chi square
mean_var('chi square',chi2_dist)

# Log-normal
mean_var('Log-normal',lognorm(s=0.5, loc=0))

# cauchy
mean_var('cauchy',cauchy)

# Beta
mean_var('Beta',beta(a=2, b=5))

# Weibull
mean_var('Weibull',weibull_min(c=2))

tabletitles=['Random Variables','Expectation','Variance']
tables=tabulate(data,tabletitles)
print(tables)